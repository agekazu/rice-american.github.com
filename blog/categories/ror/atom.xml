<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RoR | こめぶろ]]></title>
  <link href="http://rice-american.github.io/blog/categories/ror/atom.xml" rel="self"/>
  <link href="http://rice-american.github.io/"/>
  <updated>2014-01-26T18:04:50+09:00</updated>
  <id>http://rice-american.github.io/</id>
  <author>
    <name><![CDATA[rice_american]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rails+bootstrapなアプリケーションを作る]]></title>
    <link href="http://rice-american.github.io/blog/2014/01/26/rails-bootstrap/"/>
    <updated>2014-01-26T00:44:29+09:00</updated>
    <id>http://rice-american.github.io/blog/2014/01/26/rails-bootstrap</id>
    <content type="html"><![CDATA[<ul>
<li>install及びアプリ作成までは次のページを参考に</li>
<li><p>参考: <a href="http://www.ohmyenter.com/?p=197">simple_formとTwitter bootstrapで作る俺流鉄板Railsアプリ（その１） / Oh My Enter!</a></p></li>
<li><p>Gemfileに追加</p></li>
</ul>


<p>```
gem &ldquo;therubyracer&rdquo;</p>

<h1>bootstrap</h1>

<p>gem &ldquo;less-rails&rdquo; #Sprockets (what Rails 3.1 uses for its asset pipeline) s    upports LESS
gem &ldquo;twitter-bootstrap-rails&rdquo;
```
次に
<em>bundle install</em>実行</p>

<ul>
<li>bootstrapのinstall</li>
</ul>


<p><code>
$ rails generate bootstrap:install less
</code>
assetsやlocalesにファイル生成</p>

<p>基本となるレイアウトを生成する。</p>

<ul>
<li>レスポンシブレイアウトをinstall</li>
</ul>


<p><code>
$ rails g bootstrap:layout application fluid
</code></p>

<p>application_name/dtabase.ymlを編集して、ユーザをpostgresに。
そのあと<em>rake db:create RAILS_ENV=development</em>を実行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuへRuby on Railsアプリケーションをdeployするまで]]></title>
    <link href="http://rice-american.github.io/blog/2014/01/26/heroku-RoR/"/>
    <updated>2014-01-26T00:24:57+09:00</updated>
    <id>http://rice-american.github.io/blog/2014/01/26/heroku-RoR</id>
    <content type="html"><![CDATA[<p><strong>参考</strong>:<a href="http://qiita.com/mah_lab/items/9df8230e709a23b04f7f">Herokuでアプリを公開する直前までのチュートリアル &ndash; Qiita [キータ]</a></p>

<pre><code>$ git clone git://github.com/heroku/ruby-sample.git
$ cd ruby-sample
$ heroku create
$ git push heroku master
$ heroku open
</code></pre>

<p><em>heroku open</em>を実行すると先ほどpushしたrailsアプリが表示される。</p>

<p>applicationの名前を変更するときは<em>$ heroku rename hogehoge</em>とする。</p>

<p>次のようにした。</p>

<p><code>
$ heroku rename rice-rails-test                         [~/trial/ruby-sample]
Renaming warm-castle-8443 to rice-rails-test... done
http://rice-rails-test.herokuapp.com/ | git@heroku.com:rice-rails-test.git
Git remote heroku updated
</code></p>

<h2>前に作ったbootstrap+railsなアプリをdeployする。</h2>

<p>作ったアプリケーションに移動して</p>

<p><code>
$ git init
$ heroku create rice-rails-bootstrap-test
$ git push heroku master
$ heroku open
</code></p>

<p>表示されたページにerrorがでた</p>

<p><code>
The page you were looking for doesn't exist.
</code></p>

<p>検索すると･･･:<a href="http://qiita.com/seltzer/items/d52a31c558a30c857a3f">herokuで「The page you were looking for doesn’t exist.」エラーが出るときの対処法 &ndash; Qiita [キータ]</a></p>

<p><em>『Rails 3.2以降で発生する現象で、アセット周りのプリコンパイルが影響しているのだとか。これを回避するには、オフィシャルドキュメントの手順に加えて次の手順をしなければならないようです。』</em>
とのこと。</p>

<p><code>
$ rake assets:precompile
</code></p>

<p>だがだめ、</p>

<p><code>
$ vim config/environments/production.rb
config.assets.compile = true
</code>
としてdeployするもだめ、</p>

<p><a href="http://d.hatena.ne.jp/piggery/20120807">HerokuでRailsアプリを動かす &ndash; かいはつにっき</a></p>

<p>ここを見ると、</p>

<p><code>
$ rails server -e production
</code>
として動かすと,dbがないと言われた。</p>

<p><code>
The page you were looking for doesn't exist.
</code></p>

<p>検索すると･･･:<a href="http://qiita.com/seltzer/items/d52a31c558a30c857a3f">herokuで「The page you were looking for doesn’t exist.」エラーが出るときの対処法 &ndash; Qiita [キータ]</a></p>

<p><em>『Rails 3.2以降で発生する現象で、アセット周りのプリコンパイルが影響しているのだとか。これを回避するには、オフィシャルドキュメントの手順に加えて次の手順をしなければならないようです。』</em>
とのこと。</p>

<p><code>
$ vim config/environments/production.rb
config.assets.compile = true
</code>
としてdeployするもだめ、</p>

<p><a href="http://d.hatena.ne.jp/piggery/20120807">HerokuでRailsアプリを動かす &ndash; かいはつにっき</a></p>

<p>ここを見ると、</p>

<p><code>
$ rails server -e production
</code>
として動かすとdbがないと言われた。</p>

<p><code>
$ rake db:migrate
$ rake db:create
</code></p>

<p>なんやかんや最終的にはurlが間違ってたっぽい･･･url+=/books</p>

<p><a href="http://rice-rails-bootstrap-test.herokuapp.com/books">http://rice-rails-bootstrap-test.herokuapp.com/books</a></p>

<p>アホや･･･</p>

<h2>CentOSにherokuを</h2>

<p>参考:<a href="http://succi.jp/blog/?p=1137">「CentOSにheroku toolbeltをインストール」が失敗する場合の対処</a></p>

<p>```</p>

<h1>いきなりshに送る事は避けて、install.shをダウンロード</h1>

<p>$ wget &mdash;no-check-certificate <a href="https://toolbelt.heroku.com/install.sh">https://toolbelt.heroku.com/install.sh</a></p>

<h1>install.shの内容を確認してから、改めて実行</h1>

<p>$ sh ./install.sh
This script requires superuser access to install software.
You will be prompted for your password by sudo.
Installation complete</p>

<h1>install.shを削除</h1>

<p>$ rm install.sh</p>

<h1>パスを追加</h1>

<p>$ echo &lsquo;PATH=&ldquo;/usr/local/heroku/bin:$PATH&rdquo;&rsquo; >> .bashrc
$ source .bashrc</p>

<h1>実行</h1>

<p>$ heroku &mdash;version
heroku-toolbelt/3.1.0 (x86_64-linux) ruby/2.0.0
```
ok</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkinsについて学ぶ]]></title>
    <link href="http://rice-american.github.io/blog/2014/01/19/about_jenkins/"/>
    <updated>2014-01-19T12:51:01+09:00</updated>
    <id>http://rice-american.github.io/blog/2014/01/19/about_jenkins</id>
    <content type="html"><![CDATA[<p>Jenkins本『入門Jenkins』にて学んだことをメモ。
hogehogeo</p>

<h1>第1章</h1>

<h2>継続的インテグレーション(CI)とは</h2>

<ul>
<li>CIという言葉が生まれる以前:スモークテストと夜間ビルド</li>
<li><p>90年台後半:アジャイル開発の中で、XP(eXtreme Programming)のプラクティスの一つとしてCIが提案され、Webアプリケーション開発の現場で使われ始めた。
よく使われていたのは、<em>CruiseControl</em>や<em>Apache Continum</em>など。</p></li>
<li><p>CIは夜間ビルドのように、決まった時間にビルドするのではなく、CIツールがバージョン監視システムのリポジトリを監視し、リポジトリに変更があった場合にコンパイル、テスト、デプロイという一連のビルドを実施してくれる。</p></li>
</ul>


<h2>CIのメリット</h2>

<ol>
<li>欠陥の早期検知

<ul>
<li>複数人開発の場合、ほかの人の開発したモジュールと結合してみると、全くテストが動作しないということがある。CIツールを使用して、常時修正を取り込み、ビルドすることで、結合時の問題を解消できる。</li>
<li>独立したCIサーバが常にリポジトリを関し、変更があったら一連のビルドを実施することで、特に結合に絡む欠陥の早期に検出し、各開発者にフィードバックできるようになる。</li>
</ul>
</li>
<li>手作業によるミスの低減

<ul>
<li>コンパイル、テスト、デプロイを手作業でやった場合、ミスが発生することが考えられるが、CIツールを使えば大丈夫。</li>
</ul>
</li>
<li>時系列品質の可視化

<ul>
<li>CIツールでは各ビルドに関する情報を格納しているので、時系列でビルドに関する各種情報を可視化できる。</li>
</ul>
</li>
</ol>


<h2>CIの構成要素</h2>

<h3>CIのフロー</h3>

<ol>
<li>開発者がソースコードやテストを作成or修正して変更をバージョン管理サーバのリポジトリに登録</li>
<li>CIサーバがバージョン管理サーバ上のリポジトリの変更を検知</li>
<li>CIサーバが対象のリポジトリに紐づく各種ジョブの実施をビルドサーバに依頼する。ビルドサーバはCIサーバと独立していないこともある</li>
<li>ビルドサーバがコンパイルやテストなどのジョブを実施する。</li>
<li>ジョブの結果をCIサーバが収集し、レポートをにまとめる</li>
<li>CIサーバがジョブの結果を開発者にメールやチャットなどでフィードバックする</li>
</ol>


<p>基本的に上記の流れを繰り返す。CIサーバは定期ビルドも実施できたり、トリガを設定できたりする。</p>

<h4>バージョン管理システム</h4>

<p>Git marcurialなど</p>

<h4>ビルドツール</h4>

<p>JavaではApache Ant, Apache Maven, RubyでつかわれるRakeなど。</p>

<h4>CIツール</h4>

<p>JenkinsはオープンソースCIツールのデファクトスタンダード
商用ツールではMicrosoft Visual Studio Term Founation Serverなど</p>

<h4>テストツール</h4>

<ul>
<li>CIツールではJUnitのようなユニットテストツールをはじめとして様々なレベルのテストツールを実施、レポーティングをサポートする。</li>
<li>LL言語ではテスト・ツールを使ったテストに成る。

<h4>コードカバレッジツール</h4>

自動テキストを実施したさいに、テスト対象の製品コードを自動テストがどれだけテストを実行できたかをステートメントカバレッジと言った網羅基準に従って計測してくれるもの。
CIツールではコードカバレッジも示してくれる。

<h4>コードインスペクションツール</h4></li>
<li>テストのようにコードを実行するのではなく、ソースコードもしくはバイトコードを読み取って、コーディングルールの準拠や潜在バグの検出をするもの。</li>
<li>Javaの開発ではCheckstyleとFindBugsがデファクトスタンダード。両方使われることが多い。</li>
<li>CIツールではコードインスペクションツールの実施結果もレポートにでき、また時系列に可視化できる。

<h4>コードレビューシステム</h4></li>
<li>CIの目的はビルドのすべての作業を自動化するだけではない。</li>
<li>コードレビューや手動テストといったどうしても人でのワークフローが必要な領域があり、その一つがコードレビューシステム。</li>
<li>Gerritを始めとするコードレビューシステムにより、手動でのコードレビューをサポートする。</li>
</ul>


<h1>第2章 Jenkinsの生まれた背景と歴史</h1>

<h2>Jenkinsの生まれた背景</h2>

<p>Jenkinsは元々Hudosonという名称で、2004年川口耕介氏によって開発された。</p>

<h2>CIツールとしてのJenkinsのメリット</h2>

<ul>
<li>CruiseControlやApacheContinumよりもJenkinsが選ばれる理由について</li>
</ul>


<h3>インストールが容易</h3>

<ul>
<li>installerの指示に従えば、数ステップでCIサーバが立てられる。</li>
</ul>


<h3>つかいやすいWebインタフェースによる運用の容易性</h3>

<ul>
<li>Pluginによる拡張性の高い運用が可能だが、これもWebインタフェースによりできる。</li>
</ul>


<h3>豊富なPlugin</h3>

<ul>
<li>デフォルトではSubversionだが、Git Pluginなどを入れれば、各種バージョン管理システムが利用できる。また、ユニットテストツール、メトリックスツール、ビルドツール、課題管理ツール、テスト管理ツールでもメジャーなものはPluginを導入すれば使える。</li>
</ul>


<h2>JavaEE以外の利用</h2>

<ul>
<li>JenkinsはJavaで開発されていることから、JavaEEで使用されていることが多い、しかし、他の領域でも使用できる。

<ul>
<li>Android Application</li>
<li>RoR</li>
<li>コードレビューシステムGerrit</li>
<li>Catalystアプリケーション開発</li>
</ul>
</li>
</ul>


<h1>第4章 Jenkinsの導入</h1>

<h2>Jenkinsのyum install</h2>

<p>今回は本書で使われているUbuntuではなく、Centos6.5に導入することに。</p>

<p>CentOSにJenkinsを入れるに当たり、<a href="http://qiita.com/phimcall/items/10e2003b712ed0adfc7c">CentOS に Jenkins を入れて自動的にコミットとかやりたかった &ndash; Qiita [キータ]</a>を参考にしたのん。</p>

<h1>第7章 RoRをもいいたアプリケーションでのJenkins実践</h1>

<h2>rails newとRSpec</h2>

<ul>
<li>TestToolにRSpecをgem installするため、Gemfileに以下の行を加え、bundle installを行います。</li>
</ul>


<p>```
group :test, :development do</p>

<pre><code>gem 'rspec-rails', '~&gt;2.0'
</code></pre>

<p>end
```</p>

<ul>
<li>RSpecに必要なファイルを生成</li>
</ul>


<p>```
vagrant:>rails generate rspec:install    [/vagrant/work/blog][01/19 06:05:44]</p>

<pre><code>  create  .rspec
  create  spec
  create  spec/spec_helper.rb
</code></pre>

<p>```</p>

<ul>
<li>Railsのscaffoldを用いてProject基礎部分をテストとともに生成する。</li>
</ul>


<p><code>
rails generate scaffold Port name:string title:string content:text
</code></p>

<ul>
<li><p>capybara-webkitのインストール
capybara-webkitは、<strong>RSpecではやってくれないJavaScriptのテストを含めた結合テスト</strong>を行ってくれる。</p></li>
<li><p>Qtをインストール</p></li>
</ul>


<p><code>
$ yum install qt4 qt4-devel qt4-doc qt4-postgresql qt4-odbc qt4-sqlite qt-creator
</code></p>

<p>rspec-rails
database_cleaner</p>

<p>```
group :test, :development do</p>

<pre><code>gem 'rspec-rails', '~&gt;2.0'
gem 'database_cleaner'
</code></pre>

<p>end</p>

<p>group :test do</p>

<pre><code>gem 'headless'
</code></pre>

<p>end
~
```</p>

<p>```
Gem::Ext::BuildError: ERROR: Failed to build gem native extension.</p>

<pre><code>/home/vagrant/.rbenv/versions/2.1.0/bin/ruby extconf.rb
</code></pre>

<p>Command &lsquo;qmake -spec linux-g++ &rsquo; not available</p>

<p>Makefile not found</p>

<p>Gem files will remain installed in /home/vagrant/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/capybara-webkit-1.1.1 for inspection.
Results logged to /home/vagrant/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/extensions/x86_64-linux/2.1.0-static/capybara-webkit-1.1.1/gem_make.out
An error occurred while installing capybara-webkit (1.1.1), and Bundler cannot
continue.
Make sure that <code>gem install capybara-webkit -v '1.1.1'</code> succeeds before
bundling.
FAILED&hellip;gem install capybara-webkit -v &lsquo;1.1.1&rsquo;
```</p>

<p>今日(2014/01/19)はここまで</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails アプリケーション作成の手順]]></title>
    <link href="http://rice-american.github.io/blog/2014/01/18/rails_app/"/>
    <updated>2014-01-18T00:00:00+09:00</updated>
    <id>http://rice-american.github.io/blog/2014/01/18/rails_app</id>
    <content type="html"><![CDATA[<p>#
1. DBの設定</p>

<p>databaseの設定は<code>application_name/dtabase.yml</code>を編集して行う。</p>

<p>```</p>

<h2>% vim config/database.yml</h2>

<h1>PostgreSQL. Versions 8.2 and up are supported.</h1>

<p>#</p>

<h1>Install the pg driver:</h1>

<h1>gem install pg</h1>

<h1>On OS X with Homebrew:</h1>

<h1>gem install pg &mdash; &mdash;with-pg-config=/usr/local/bin/pg_config</h1>

<h1>On OS X with MacPorts:</h1>

<h1>gem install pg &mdash; &mdash;with-pg-config=/opt/local/lib/postgresql84/bin/pg_config</h1>

<h1>On Windows:</h1>

<h1>gem install pg</h1>

<h1>Choose the win32 build.</h1>

<h1>Install PostgreSQL and put its /bin directory on your path.</h1>

<p>#</p>

<h1>Configure Using Gemfile</h1>

<h1>gem &lsquo;pg&rsquo;</h1>

<p>#
development:
  adapter: postgresql
  encoding: unicode
  database: sample_development
  pool: 5
  username: vagrant
  password: vagrant_password</p>

<p>  # Connect on a TCP socket. Omitted by default since the client uses a
  # domain socket that doesn&rsquo;t need configuration. Windows does not have
  # domain sockets, so uncomment these lines.
  #host: localhost</p>

<p>  # The TCP port the server listens on. Defaults to 5432.
  # If your server runs on a different port number, change accordingly.
  #port: 5432</p>

<p>  # Schema search path. The server defaults to $user,public
  #schema_search_path: myapp,sharedapp,public</p>

<p>  # Minimum log levels, in increasing order:
  #   debug5, debug4, debug3, debug2, debug1,
  #   log, notice, warning, error, fatal, and panic
  # Defaults to warning.
  #min_messages: notice</p>

<h1>Warning: The database defined as &ldquo;test&rdquo; will be erased and</h1>

<h1>re-generated from your development database when you run &ldquo;rake&rdquo;.</h1>

<h1>Do not set this db to the same as development or production.</h1>

<p>test:
  adapter: postgresql
  encoding: unicode
  database: sample_test
  pool: 5
  username: vagrant
  password: vagrant_password</p>

<p>production:
  adapter: postgresql
  encoding: unicode
  database: sample_production
  pool: 5
  username: vagrant
  password: vagrant_password
```</p>

<p>DBを作成</p>

<p><code>
% rake db:create RAILS_ENV=development
</code></p>

<p>2.controllerを作成</p>

<p><code>
% rails generate controller hoge
</code>
Controllerは<code>application_name/app/controllers</code>に<code>hoge_controller.rb</code>として作成される。</p>

<p>ControllerにはActionを設定する。</p>

<p>3.Routingの設定</p>

<p>Routing設定では、利用者から呼び出された時のActionをどのように実行するかを定義する。設定は<code>application_name/config/routes.rb</code>を書き換えて行う。</p>

<p>例えばユーザが<code>http://localhost:3000/hello</code>を呼び出した時、Controllerで設定したaction｢hello｣を呼び出すには、次のようにRoutingを設定する。</p>

<p><code>
get 'hello' =&gt; 'booklist#hello'
</code></p>

<p>4.railsサーバの起動</p>

<p><code>
% rails server
</code></p>

<p>5.modelの作成</p>

<p><code>
% rails generate model title
</code></p>

<p><em>app/models/title.rb</em>が作成される。</p>

<pre><code>また、作成された```db/migrate/20140115163018_create_titles.rb```はmigrationである。migrationは、
1. テーブルに関して行なった処理を記録し、元に戻したり別の環境で同じ処理を簡単に行なわせることができる
2. データベースの種類に関係無く同じスクリプトでテーブルを作成できる

という利点がある。
</code></pre>

<p>6.migration編集</p>

<p>```
class CreateTitles &lt; ActiveRecord::Migration
  def change</p>

<pre><code>create_table :titles do |t|

  t.string: name
  t.data: sales_data
  t.timestamps
end
</code></pre>

<p>  end
end
```</p>

<p>migration scriptを起動</p>

<p><code>
% rake db:migrate
</code></p>

<p>7.テストデータ作成</p>

<pre><code>```db/seeds.rb```を編集し、テストデータを作成する。
</code></pre>

<p><code>
Title.create(:name =&gt; '宇宙に行った日', :sales_date =&gt; '2011-06-28')
Title.create(:name =&gt; '観察日記', :sales_date =&gt; '2011-11-14')
</code></p>

<p><code>
% rake db:seed
</code>
7. 確認</p>

<p>```</p>

<pre><code>sample_development=# select * from titles;
 id |         name          | sales_date |         created_at         |
  updated_at
----+-----------------------+------------+----------------------------+-------
---------------------
  1 | 宇宙に行った日 | 2011-06-28 | 2014-01-16 04:46:10.565985 | 2014-01-16 04:46:10.565985
  2 | 観察日記          | 2011-11-14 | 2014-01-16 04:46:10.666546 | 2014-01-16 04:46:1
0.666546
(2 rows)
</code></pre>

<p>```</p>

<pre><code>migrationを利用し、作成されている。
</code></pre>

<p>8.Databaseの情報を取得し表示する</p>

<p>action methodを書き換える。<code>controller/booklist_controller.rb</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VagrantでCentOSを入れてRails環境構築]]></title>
    <link href="http://rice-american.github.io/blog/2014/01/12/vagrant/"/>
    <updated>2014-01-12T11:53:18+09:00</updated>
    <id>http://rice-american.github.io/blog/2014/01/12/vagrant</id>
    <content type="html"><![CDATA[<h2>目標</h2>

<p>VagnrantでCentOS立てて、Railsの開発環境を整えてBox化する。</p>

<h2>vagrantの環境構築</h2>

<p>参考サイト
<a href="http://qiita.com/hamichamp/items/e27a0ecacc33482936c8">Mac OS XでVagrantとChefを使った環境構築のまとめ &ndash; Qiita [キータ]</a></p>

<h3>boxをつくるまでのながれ</h3>

<ol>
<li>virtual boxいれます</li>
<li>vagrantいれます</li>
<li>osのboxいれます</li>
<li>環境を構築します</li>
<li>box化します</li>
</ol>


<h3>実際にやってみる</h3>

<h4>1. virtual box入れます</h4>

<ul>
<li><a href="https://www.virtualbox.org/wiki/Downloads">Downloads – Oracle VM VirtualBox</a>
Virtual Box 4.3.6が最新(2014/01/12)</li>
</ul>


<h4>2. vagrant入れます</h4>

<ul>
<li><a href="http://www.vagrantup.com/">Vagrant公式サイト</a>
Vagrant 1.4.3が最新(2014/01/12)</li>
</ul>


<h4>3. osのbox入れます</h4>

<ul>
<li><a href="http://www.vagrantbox.es/">A list of base boxes for Vagrant &ndash; Vagrantbox.es</a></li>
</ul>


<p>installしたいOSとversionを捜す。今回はCentOSの最新ver 6.5.1を入れます。
vagrant addでlocalにOSをDLします。</p>

<p><code>
% vagrant --version                                                        [~/trial/DataCollection/test]
Vagrant 1.4.3
% which vagrant                                                            [~/trial/DataCollection/test]
/usr/bin/vagrant
% vagrant box add centos65-x86_64-20131205 https://github.com/2creatives/vagrant-centos/releases/download/v6.5.1/centos65-x86_64-20131205.box
Downloading box from URL: https://github.com/2creatives/vagrant-centos/releases/download/v6.5.1/centos65-x86_64-20131205.box
Extracting box...te: 309k/s, Estimated time remaining: --:--:--)
Successfully added box 'centos65-x86_64-20131205' with provider 'virtualbox'!
</code></p>

<p>18分くらいかかった。</p>

<p>確認してみる。(localにあるosのbox一覧)</p>

<p><code>
% vagrant box list                                                     
centos                   (virtualbox)
centos65-x86_64-20131205 (virtualbox)
</code></p>

<p>centos65-x86_64-20131205が入ってる。
(centosは前に作ったやつ。)</p>

<p>てきとうなディレクトリを作って</p>

<p><code>
% vagrant init
% vagrant up
% vagrant ssh
</code>
とするのだが、<code>vagrant up</code>でエラーが出た。</p>

<p>```
Bringing machine &lsquo;default&rsquo; up with &lsquo;virtualbox&rsquo; provider&hellip;
There are errors in the configuration of this machine. Please fix
the following errors and try again:</p>

<p>vm:
* The box &lsquo;base&rsquo; could not be found.
```</p>

<p><a href="http://www.trapon.jp/log/201307/mac_vagrant_centos.html">Macで Vagrant を導入してCentOSを入れる | trapon : experience</a>
より、先ほど作成したbox名(centos65-x86_64-20131205)を指定しなければならないらしい。</p>

<p>vagnratfileを書き換えて再度<code>vagrant up</code>を実行。</p>

<p>```
% vagrant up                                  [~/vagrant/kita]
WARN: Unresolved specs during Gem::Specification.reset:</p>

<pre><code>  ffi (&gt;= 1.0.11, ~&gt; 1.0)
  net-ssh (&lt; 2.8.0, &gt;= 2.6.5, &gt;= 2.6.6)
</code></pre>

<p>WARN: Clearing out unresolved specs.
Please report a bug if this causes problems.
Bringing machine &lsquo;default&rsquo; up with &lsquo;virtualbox&rsquo; provider&hellip;
[default] Importing base box &lsquo;centos65-x86_64-20131205&rsquo;&hellip;
[default] Matching MAC address for NAT networking&hellip;
[default] Setting the name of the VM&hellip;
[default] Clearing any previously set forwarded ports&hellip;
[default] Clearing any previously set network interfaces&hellip;
[default] Preparing network interfaces based on configuration&hellip;
[default] Forwarding ports&hellip;
[default] &mdash; 22 => 2222 (adapter 1)
[default] Booting VM&hellip;
[default] Waiting for machine to boot. This may take a few minutes&hellip;
[default] Machine booted and ready!
[default] Mounting shared folders&hellip;
[default] &mdash; /vagrant
```</p>

<p>ok.次は環境構築。</p>

<h4>4. 環境を構築します</h4>

<p><strong>最低限必要な環境を構築</strong></p>

<p>zsh, vim, emacs, wget, rubyをyum install
<code>
% sudo yum install -y zsh vim emacs wget ruby
</code>
rubyをinstallするためにrubyが必要なので、rubyを入れる。</p>

<p>あと、</p>

<p><code>
% sudo chsh -s /bin/zsh vagrant
</code>
でvagrantのlogin shellを指定しておく。</p>

<p><strong>rbenvを導入</strong></p>

<p>次にrubyのversion管理を行ってくれるrbenvを入れる。
gitは入っていたのでrbenvをgit cloneする</p>

<p><code>
[vagrant@vagrant-centos65 ~]$ git clone git://github.com/sstephenson/rbenv.git .rbenv
Initialized empty Git repository in /home/vagrant/.rbenv/.git/
remote: Reusing existing pack: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 290.89 KiB | 118 KiB/s, done.
Resolving deltas: 100% (1162/1162), done.
</code>
無事install完了</p>

<p><code>
% echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.zprofile
% echo 'eval "$(rbenv init - zsh)"' &gt;&gt; ~/.zprofile
% source .zprofile
</code>
rbenvで確認</p>

<p><code>
% rbenv
rbenv 0.4.0-89-g14bc162
(ry
</code>
おk</p>

<p>次にruby-buildを入れる。ruby-buildはrbenvでrubyをinstallする際に必要となる、rbenvのplugin。.rbenv/pluginsに入れる。</p>

<p><code>
git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
</code></p>

<p>そしたら</p>

<p><code>
[vagrant@vagrant-centos65 ~]$ rbenv install
Usage: rbenv install [-f] [-kvp] &lt;version&gt;
</code>
rbenv installが使える。これで<code>rbenv install 2.0.0-dev</code>で2.0.0-devを入れられる。。。</p>

<p>と思ったらエラー</p>

<p><code>
/tmp/ruby-build.20140112065649.9158 ~
Initialized empty Git repository in /tmp/ruby-build.20140112065649.9158/ruby-2.2.0-dev/.git/
/tmp/ruby-build.20140112065649.9158/ruby-2.2.0-dev /tmp/ruby-build.20140112065649.9158 ~
configure.in:6: error: Autoconf version 2.67 or higher is required←これ
configure.in:6: the top level
autom4te: /usr/bin/m4 failed with exit status: 63
</code></p>

<p>autoconf version2.67以上が必要。
一応、確認してみる。</p>

<p>```
[vagrant@vagrant-centos65 ~]$ autoconf &mdash;version
autoconf (GNU Autoconf) 2.63
Copyright &copy; 2008 Free Software Foundation, Inc.
License GPLv2+: GNU GPL version 2 or later
<a href="http://gnu.org/licenses/old-licenses/gpl-2.0.html">http://gnu.org/licenses/old-licenses/gpl-2.0.html</a>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.</p>

<p>Written by David J. MacKenzie and Akim Demaille.
```
version 2.63だった。
wgetで最新のautoconfを入れる。</p>

<p><code>
% wget http://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.gz
% tar zxfv autoconf-2.69.tar.gz
</code>
あとはcdしてconfigureしてmakeしてmake install.あと/usr/local/binにpathを通す。(忘れてた)</p>

<p>コレでよしと思ったらまたエラーが出た。</p>

<p><code>
The Ruby openssl extension was not compiled. Missing the OpenSSL lib?
</code></p>

<p>opensslがないって言われた。が、opensslはある･･･
しらべてみると同じようなエラーが出た人がいた。
<a href="http://futurismo.biz/archives/1389">CentOSに rbenv 経路で Ruby 2.0.0-p195を入れようとしたら、エラー | Futurismo</a>
libssl-devがないといけないらしい。</p>

<p><code>
% sudo yum -y install openssl-devel
</code>
を実行</p>

<p><code>
$ rbenv install 2.2.0-dev
ry
$ rbenv versions
* system (set by /home/vagrant/.rbenv/version)
  2.2.0-dev
</code>
出来た。</p>

<p><code>
$ rbenv global 2.2.0-dev
$ ruby --version
ruby 2.2.0dev (2014-01-12 trunk 44569) [x86_64-linux]
</code></p>

<p>railsをgem install</p>

<p><code>
$ gem install rails
</code>
30分くらいかかった。</p>

<p><strong>rails環境を整える</strong></p>

<p>DBMSはpostgresqlを使用するので、2014/01/15現在最新のver9.3 を入れる。</p>

<p>参考:<a href="http://www.ideaxidea.com/archives/2013/12/centos6_postgresql_yum.html">PostgreSQL9.3をCentOS6にyumで入れて設定するまでの手順まとめ | IDEA*IDEA</a></p>

<p>postgresql93のinstallと自動起動の設定</p>

<p><code>
$ sudo rpm -i http://yum.postgresql.org/9.3/redhat/rhel-6-x86_64/pgdg-redhat93-9.3-1.noarch.rpm
$ sudo yum -y install postgresql93-server postgresql93-contrib  postgresql93-devel
$ sudo service postgresql-9.3 initdb
$ sudo chkconfig postgresql-9.3 on
$ sudo service postgresql-9.3 status
$ sudo service postgresql-9.3 start
</code></p>

<p>Timezoneの設定</p>

<p><code>
sudo vim /var/lib/pgsql/9.3/data/postgresql.conf
timezone = 'Asia/Tokyo'
</code></p>

<p>install時にposstgresというユーザが作られる。</p>

<p><code>
$ id postgres
uid=26(postgres) gid=26(postgres) groups=26(postgres)
$ su - postgres
Password:
</code></p>

<p>installされたpsqlコマンドは、<code>/usr/pgsql-9.3/bin</code>以下に保存されるので、そこにPATHを通しておく。</p>

<p>次にuser vagrant に権限を追加する
参考:<a href="http://www.postgresql.jp/document/8.1/html/app-createuser.html">createuser</a></p>

<p>```
$ su &ndash; postgres
$ createuser &mdash;createdb &mdash;createrole &mdash;superuser vagrant
$ psql
psql (9.3.2)
Type &ldquo;help&rdquo; for help.</p>

<p>postgres=# \du</p>

<pre><code>                         List of roles
</code></pre>

<p> Role name |                   Attributes                   | Member of
&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;
 postgres  | Superuser, Create role, Create DB, Replication | {}
 vagrant   | Superuser, Create role, Create DB              | {}
```</p>

<p>次にrails環境の構築を行う。
作業は/vagrant/work以下で行う。この/vagrantディレクトリはhostOSでのVagrantfileの入ったディレクトリとの共有ディレクトリである。</p>

<p>つぎにpgのinstallは、<code>% gem install pg -- --with-pg-config=/usr/pgsql-9.3/bin/ --with-pg-lib=/usr/pgsql-9.3/lib</code>
のように指定してinstallする必要がある。</p>

<p>その後、<code>rails new sample -d postgresql</code>を実行する。</p>

<p><code>
% rails new sample -d postgresql
(ry
</code>
bundle installに割りと時間がかる。</p>

<p>その後、作成したsampleディレクトリに移動し、<a href="http://www.rubylife.jp/rails/ini/">アプリケーション作成から実行までの手順 &ndash; Ruby on Rails入門</a> を元に<code>rails server(rails s)</code>を実行しrailsアプリが動くか確認。</p>

<p>エラーが発生した。</p>

<p><code>
autodetect': Could not find a JavaScript runtime.
</code></p>

<p>sample/Gemfileでコメントアウトされている<code>gem 'therubyracer', :platforms =&gt; :ruby</code>をコメントアウト外して<code>bundle install</code>を行う。</p>

<p>ここまで来たらrailsアプリが作成できる。その前に、一度vagrantを閉じ、vagrantfileに記述を追加する。</p>

<p><code>
config.vm.network :forwarded_port, guest: 3000, host: 3000
</code>
これは、gestOSのport3000番を、hostOSの3000番に接続する記述である。この記述により、guestOSで立ち上げたRailsApplicationがhostOSのブラウザで確認できるようになる。</p>

<p>なお、railsアプリケーションの作成法については <a href="http://www.rubylife.jp/rails/ini/index6.html">モデルの作成とデータベースの利用 &ndash; Ruby on Rails入門</a>を参考にし、作成できることを確認した。</p>

<h4>5. box化します</h4>

<ol>
<li><code>VBoxManage list vms</code>でbox化したいVM imageの名前をコピー</li>
<li><code>vagrant package --base コピーしたVMimageの名前 --output path/to/任意のbox名.box</code>で&mdash;outputで指定したpathにboxファイルが作成される。</li>
<li>作成されたboxを<code>vagrant box add</code>して、きちんと使用できるか確認する。</li>
<li>出来た。</li>
</ol>


<p>vagrantでCentOSを入れる、rails環境を整える、box作成までの流れはこんなかんじ。</p>

<p>やっとJenkinsに移れる･･･</p>
]]></content>
  </entry>
  
</feed>
