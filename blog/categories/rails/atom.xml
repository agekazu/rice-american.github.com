<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | こめぶろぐ]]></title>
  <link href="http://rice-american.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://rice-american.github.io/"/>
  <updated>2014-03-22T14:17:17+09:00</updated>
  <id>http://rice-american.github.io/</id>
  <author>
    <name><![CDATA[rice_american]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fonticonをherokuに適応するまで]]></title>
    <link href="http://rice-american.github.io/blog/2014/03/22/heroku-icon/"/>
    <updated>2014-03-22T14:14:57+09:00</updated>
    <id>http://rice-american.github.io/blog/2014/03/22/heroku-icon</id>
    <content type="html"><![CDATA[<p>こうなるまでの道のり
<img src="https://f.cloud.github.com/assets/1464221/2489851/b68b3de6-b17b-11e3-8e4d-c30bd31adef2.png" alt="2014-03-22 13 37 24" /></p>

<p>前に書いた<a href="https://github.com/kanpe777/Mahjong/issues/24">herokuへdeployしたアプリケーションにwebfontを適用させる · Issue #24 · kanpe777/Mahjong</a>を参考にし、導入した。しかし、localでは反映されたが、heroku上ではfontfileやらcss,jsがNotFoundとなってしまい、webfontが表示されなかった(´・ω・`)</p>

<h2>対策</h2>

<p>色々探してみると次のような記事があった。</p>

<p><a href="http://shuzo-kino.hateblo.jp/entry/2014/03/21/221411">rails4でprecompileが必要なアプリをherokuにアップロードする &ndash; Bye Bye Moore</a></p>

<p>追記
```rb</p>

<h1>/config/environments/production.rb</h1>

<p>config.cache_classes = true
config.serve_static_assets = true
config.assets.compile = true
config.assets.digest = true
<code>``
で、assets.pathについてだが、これは[Rails4でハマった件、 - Railsプロになろう！](http://d.hatena.ne.jp/senggonghaza/20130711/1373530360)を見て、</code>app/config/environments/production.rb<code>ではなく、</code>app/config/application.rb`に書いた。</p>

<p>```rb</p>

<h1>/config/application.rb</h1>

<p>  config.assets.paths &lt;&lt; Rails.root.join(&ldquo;app&rdquo;, &ldquo;assets&rdquo;, &ldquo;fonts&rdquo;)
  config.assets.precompile += %w( .svg .eot .woff .ttf )
<code>``
この後、vagrantの方で</code>rake assets:precompile<code>を実行し、生成されたファイルを</code>git add<code>して、</code>git push heroku master`をすると･･･</p>

<p><img src="https://f.cloud.github.com/assets/1464221/2489916/c97f9492-b180-11e3-8d4c-d5b7dd8d38fc.png" alt="2014-03-22 14 11 25" />
読み込まれたッ！</p>

<p><img src="https://f.cloud.github.com/assets/1464221/2489851/b68b3de6-b17b-11e3-8e4d-c30bd31adef2.png" alt="2014-03-22 13 37 24" />
表示もされていますね( ´∀｀)</p>

<p>以上！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsで、暗号化されたpasswordを使ってログイン機構を作ってみる。]]></title>
    <link href="http://rice-american.github.io/blog/2014/03/07/rails-sec-login/"/>
    <updated>2014-03-07T13:23:17+09:00</updated>
    <id>http://rice-american.github.io/blog/2014/03/07/rails-sec-login</id>
    <content type="html"><![CDATA[<p>前回でpasswordの暗号化までいけたので、今度はそれを使ってログインするところまで。
参考: <a href="http://qiita.com/regonn/items/4c76d4f3ef6c6af5c5e5">Rails4対応 Gemを使わずに自分だけログインできる環境を作る &ndash; Qiita</a></p>

<h3>1. ログイン環境のsessionコントローラを生成</h3>

<p><code>sh
$ rails g controller sessions
</code></p>

<h3>2. viewの作成</h3>

<p><code>views/sessions/new.html.erb</code>
```rb</p>

<div class="row">
  <div class="span6 offset3">
  </div><%- model_class = User -%>
<div class="page-header">
  <!--  <h1><%=t '.title', :default => [:'helpers.titles.new', 'New %{model}'], :model => model_class.model_name.human.titleize %></h1>-->
</div>
<%= simple_form_for @user, url: sessions_path, html: { class: 'form-horizontal' } do |f| %>
  <h2 class="simple_form-heading">ログイン</h2>
  <%= f.input :user_name, label: false, placeholder: 'ユーザ名 or メールアドレス', input_html: { type: 'text', class: 'form-control input-xlarge', id: 'user_user_name'} %>
  <%= f.input :password, label: false, placeholder: 'パスワード', input_html: { type: 'password_confirm', class: 'form-control input-xlarge', id: 'password'}  %>
  <%= f.button :submit, label: false, value: 'login', class: 'btn btn-lg btn-primary btn-block' %>
<% end %>

</div>


<p>```</p>

<h3>3. routes.rbにsessionsのルートを追加</h3>

<p><code>config/routes.rb</code>
<code>rb
resources :sessions, only: [:new, :create, :destroy]
</code></p>

<h3>4. controllerを編集</h3>

<p><code>app/controller/session_controller.rb</code>
```rb
class SessionsController &lt; ApplicationController</p>

<pre><code>def new 
    @user = User.new
end

def create
    user = User.find_by_user_name(params[:user][:user_name])
    if user &amp;&amp; user.authenticate(params[:user][:password])
        session[:user_id] = user.id
        redirect_to root_path
    else
        flash.now.alert = "ユーザ名かパスワードが間違っています"
        new()
        render "new"
    end
end

def destroy
    session[:user_id] = nil
    redirect_to root_path
end
</code></pre>

<p>end
```
現段階では、ログイン認証に成功すると、root(jantaku)に飛びます。</p>

<h3>5. Viewのヘルパーメソッドでログイン情報を取得できるようにする</h3>

<p>```rb</p>

<h1>app/controller/application_controller.rb</h1>

<p>  def current_user</p>

<pre><code>@current_user ||= User.find(session[:user_id]) if session[:user_id]
</code></pre>

<p>  end</p>

<p>  helper_method :current_user
end
```</p>

<h3>6. Viewにログイン機能へのパスを書きます。</h3>

<p>```erb</p>

<h1>kitaken Top</h1>


<p>&lt;% if current_user == nil %>
&lt;%= button_to &ldquo;create account&rdquo;, new_user_path, method: :get, class: &ldquo;btn btn-lg&rdquo; %>
&lt;%= button_to &ldquo;login&rdquo;, new_session_path, method: :get, class:  &ldquo;btn btn-lg&rdquo; %>
&lt;% else %>
  &lt;%= button_to &ldquo;logout&rdquo;, session_path(current_user.id), data: {:confirm => &lsquo;ログアウトしますか？&rsquo;}, method: :delete, class: &ldquo;btn btn-lg&rdquo; %>
&lt;% end %>
```</p>

<ul>
<li>未ログイン時</li>
</ul>


<p><img src="https://f.cloud.github.com/assets/1464221/2343867/8611e0e6-a516-11e3-9c6d-e7cf0617eba5.png" alt="2014-03-06 18 58 36" /></p>

<ul>
<li>ログイン時</li>
</ul>


<p><img src="https://f.cloud.github.com/assets/1464221/2343918/7ee8d0c6-a517-11e3-91cc-f748920c79d6.png" alt="2014-03-06 18 59 06" /></p>

<h3>他のcontrollerで次のように書けばログインしていない状態でeditやnewのページに行こうとするとrootへ戻す。</h3>

<h1>controller</h1>

<p>```rb
before_action :login_check, only: [:new, :edit, :destroy]</p>

<h1>各メソッド</h1>

<p>private
  def login_check</p>

<pre><code>if (session[:user_id] == nil)
  redirect_to root_path
end
</code></pre>

<p>  end
```
今回、コレは行っていません。</p>

<p>以上！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsで、ユーザの入力したpasswordを暗号化して保存する(実践編)]]></title>
    <link href="http://rice-american.github.io/blog/2014/03/03/secdb-rails-2/"/>
    <updated>2014-03-03T16:30:03+09:00</updated>
    <id>http://rice-american.github.io/blog/2014/03/03/secdb-rails-2</id>
    <content type="html"><![CDATA[<p>前回調べたセキュアなDB運用の手順を実際にやってみる。</p>

<h3>1. bcrypt-rubyをGemfileに追加する。(passwordをhash化するgem)</h3>

<p><code>rb
gem 'bcrypt-ruby'
</code></p>

<h3>2. migrationの実行</h3>

<p>```sh
vagrant:% rails generate migration \</p>

<blockquote><p>add_password_digest_to_users password_digest:string</p></blockquote>

<pre><code>  invoke  active_record
  create    db/migrate/20140303080315_add_password_digest_to_users.rb
</code></pre>

<p>```</p>

<h3>3. userstableにpassword_digestを追加する</h3>

<p><code>sh
vagrant:% bundle exec rake db:migrate                                            [/vagrant/work/Mahjong]
==  AddPasswordDigestToUsers: migrating =======================================
-- add_column(:users, :password_digest, :string)
   -&gt; 0.0008s
==  AddPasswordDigestToUsers: migrated (0.0009s) ==============================
</code></p>

<h3>4. テスト用のDBの用意</h3>

<p><code>sh
% bundle exec rake test:prepare
</code></p>

<h3>5. パスワードの長さとauthenticateメソッドをテストする。</h3>

<p>```rb
require &lsquo;spec_helper&rsquo;</p>

<p>describe User do</p>

<p>  before do</p>

<pre><code>@user = User.new(name: "Example User", email: "user@example.com",
                 password: "foobar", password_confirmation: "foobar")
</code></pre>

<p>  end</p>

<p>  subject { @user }
  .
  .
  .
  it { should respond_to(:authenticate) }
  .
  .
  .
  describe &ldquo;with a password that&rsquo;s too short&rdquo; do</p>

<pre><code>before { @user.password = @user.password_confirmation = "a" * 5 }
it { should be_invalid }
</code></pre>

<p>  end</p>

<p>  describe &ldquo;return value of authenticate method&rdquo; do</p>

<pre><code>before { @user.save }
let(:found_user) { User.find_by(email: @user.email) }

describe "with valid password" do
  it { should eq found_user.authenticate(@user.password) }
end

describe "with invalid password" do
  let(:user_for_invalid_password) { found_user.authenticate("invalid") }

  it { should_not eq user_for_invalid_password }
  specify { expect(user_for_invalid_password).to be_false }
end
</code></pre>

<p>  end
end
```</p>

<ol>
<li><code>bundle exec rspec spec/</code>を実行</li>
</ol>


<p>するとallOKになるらしいけど、エラーでまくった･･･テストは今は考えないでおきます
取り敢えず進める。</p>

<p>最終的にapp/models/users.rbは次のようになった。</p>

<p>```rb
class User &lt; ActiveRecord::Base</p>

<pre><code>before_save { self.email_address = email_address.downcase }
validates :user_name, presence: true, length: { maximum: 50 }
# 英字:小文字、大文字、数字 format:hoGe@hgoe.hoge
VALID_EMAIL_REGEX = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i
VALID_PASSWORD_REGEX = /\w/i
VALID_USERNAME_REGEX = /\w/i
validates :user_name, presence: true,
    format:     {with: VALID_USERNAME_REGEX},
    length:     {maximum: 30},
    uniqueness: {case_sensitive: true}

validates :email_address, presence: true,
    format:     {with: VALID_EMAIL_REGEX},
    length:     {maximum: 500},
    uniqueness: {case_sensitive: false}

validates :password, presence: true,
    format:     {with: VALID_PASSWORD_REGEX},
    length:     {within: 6..30}

has_secure_password
</code></pre>

<p>end
```
追加したvalidationは</p>

<ol>
<li>username: 30文字以内、記号なし、半角英大文字小文字、数字有り、重複なし</li>
<li>email_address: 100文字以内、記号なし、emailのフォーマットを則っているかを見る</li>
<li>password: 6文字以上30文字以内、記号なし、半角英大文字小文字、数字有り</li>
</ol>


<p>です。</p>

<ul>
<li><p>メモ: 正規表現について</p></li>
<li><p>\A 文字の頭</p></li>
<li>\w 単語構成文字 [a-zA-Z0-9_]</li>
<li>\d 10進数字 [0-9]</li>
</ul>


<p>このへんもおいおい勉強しないと。</p>
]]></content>
  </entry>
  
</feed>
