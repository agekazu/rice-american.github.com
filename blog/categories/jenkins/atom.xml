<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Jenkins | こめぶろぐ]]></title>
  <link href="http://rice-american.github.io/blog/categories/jenkins/atom.xml" rel="self"/>
  <link href="http://rice-american.github.io/"/>
  <updated>2014-09-24T23:22:32+09:00</updated>
  <id>http://rice-american.github.io/</id>
  <author>
    <name><![CDATA[rice_american]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bundle Exec Rspec spec/*/*.featureが失敗する件]]></title>
    <link href="http://rice-american.github.io/blog/2014/02/08/jenkins-rspec/"/>
    <updated>2014-02-08T13:56:16+09:00</updated>
    <id>http://rice-american.github.io/blog/2014/02/08/jenkins-rspec</id>
    <content type="html"><![CDATA[<p>ローカル環境で</p>

<p><code>
bundle install --path vendor/bundle
bundle exec rake db:migrate
bundle exec rake db:test:clone
bundle exec rspec spec/*/*.feature
</code>
を実行すると、
<em>bundle exec rspec spec/*/*.feature</em>
で</p>

<p>```
% bundle exec rspec spec/<em>/</em>.feature        <br/>
syntax error, unexpected &lsquo;:&rsquo;, expecting end-of-input (SyntaxError)
機能: ユーザー管理</p>

<pre><code>   ^
</code></pre>

<p><code>``
エラーが出た(´・ω・</code>)</p>

<ul>
<li>参考:<a href="http://www.buildinsider.net/enterprise/jenkins/02">Jenkinsで小さなテストを実行してみよう（Mac OS X＆Linux）［Ruby、Rails］ &ndash; Build Insider</a></li>
</ul>


<p>rspecでGherkin記法で記述したfeatureファイルが実行できないよ> &lt; ってことらしい。</p>

<p>.rspecファイルに次のような記述をする。</p>

<p><code>
-r turnip/rspec --color --format documentation
</code>
出力に色つけてturnip(RSpecからGherkin記法で記述したテストを実行できるフレームワーク)のrspec使って実行しなさいよーということ･･･かな。</p>

<p>ここまで出来たのでJenkinsサーバの.rspecも直して実行すると･･･成功しました!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[さくらVPSにjenkinsとNginxでJenkinsサーバを構築する。]]></title>
    <link href="http://rice-american.github.io/blog/2014/01/27/nginx-jenkins/"/>
    <updated>2014-01-27T16:36:06+09:00</updated>
    <id>http://rice-american.github.io/blog/2014/01/27/nginx-jenkins</id>
    <content type="html"><![CDATA[<p>前回はHerokuにRoRアプリケーションをdeployできたので、次はJenkinsの方をば。</p>

<p>参考: <a href="http://d.hatena.ne.jp/FGtatsuro/20120603/1338653541">さくらのVPSにJenkins/Nginxをインストールする &ndash; 愉快な神様とヘタレな下僕</a></p>

<h2>Jenkinsさんのインストール</h2>

<p>JenkinsさんはJavaがないと動いてくれないので入れておきます。
<code>
$ sudo yum install -y java-1.6.0-openjdk java-1.6.0-openjdk-devel
</code></p>

<p>Jenkinsさんをお招きします
<code>
$ sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo
$ sudo rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key
$ sudo yum install jenkins
</code></p>

<p>Jenkinsさんを動かします
<code>
$ sudo service jenkins start
</code>
ok.</p>

<h2>nginxインストール</h2>

<p>nginxは</p>

<p><code>
$ sudo yum install nginx
</code>
で入ります。</p>

<h2>ネットワーク設定</h2>

<p>続いて/etc/nginx/nginx.confを書き換えます。</p>

<p>```
$ vi /etc/nginx/nginx.conf
http {</p>

<p>===</p>

<h1>ry)</h1>

<p>  server {</p>

<pre><code>listen 80;
server_name &lt;ホスト名&gt;;
location {
  proxy_pass http://localhost:80; 
}  
</code></pre>

<p>  }
}
```
ホスト名は、サーバのホスト名を入れます。</p>

<p>jenkinsの設定は/etc/nginx/conf.d/jenkins.confを変更します。</p>

<p>```
server {</p>

<pre><code>location /jenkins {
     proxy_pass http://localhost:8080;
}
</code></pre>

<p>}
```</p>

<p>そしてnginxをrestart!</p>

<p><code>
% sudo service nginx restart
nginx を停止中:                                            [  OK  ]
nginx を起動中:                                            [  OK  ]
</code></p>

<p>ok.</p>

<p>で、<a href="http://">http://</a>[ホスト名]/jenkinsへアクセスすると･･･Jenkinsさんが表示されました！</p>

<p>次はJenkinsさんの認証を何とかしますー。</p>

<p><a href="http://www.yaunix.com/2013/02/04/%E3%81%95%E3%81%8F%E3%82%89vps%E3%81%A7jenkins%E3%82%92%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97%E3%81%97%E3%80%81%E8%AA%8D%E8%A8%BC%E3%82%92%E8%A1%8C%E3%81%86%E3%81%BE%E3%81%A7/">さくらVPSでJenkinsをセットアップし、認証を行うまで | ひたすらメモするだけのブログ</a>を見ると見た感じGUIで設定できるっぽい･･･？</p>

<p>[とりあえず今日はここまで]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkinsについて学ぶ]]></title>
    <link href="http://rice-american.github.io/blog/2014/01/19/about_jenkins/"/>
    <updated>2014-01-19T12:51:01+09:00</updated>
    <id>http://rice-american.github.io/blog/2014/01/19/about_jenkins</id>
    <content type="html"><![CDATA[<p>Jenkins本『入門Jenkins』にて学んだことをメモ。
hogehogeo</p>

<h1>第1章</h1>

<h2>継続的インテグレーション(CI)とは</h2>

<ul>
<li>CIという言葉が生まれる以前:スモークテストと夜間ビルド</li>
<li><p>90年台後半:アジャイル開発の中で、XP(eXtreme Programming)のプラクティスの一つとしてCIが提案され、Webアプリケーション開発の現場で使われ始めた。
よく使われていたのは、<em>CruiseControl</em>や<em>Apache Continum</em>など。</p></li>
<li><p>CIは夜間ビルドのように、決まった時間にビルドするのではなく、CIツールがバージョン監視システムのリポジトリを監視し、リポジトリに変更があった場合にコンパイル、テスト、デプロイという一連のビルドを実施してくれる。</p></li>
</ul>


<h2>CIのメリット</h2>

<ol>
<li>欠陥の早期検知

<ul>
<li>複数人開発の場合、ほかの人の開発したモジュールと結合してみると、全くテストが動作しないということがある。CIツールを使用して、常時修正を取り込み、ビルドすることで、結合時の問題を解消できる。</li>
<li>独立したCIサーバが常にリポジトリを関し、変更があったら一連のビルドを実施することで、特に結合に絡む欠陥の早期に検出し、各開発者にフィードバックできるようになる。</li>
</ul>
</li>
<li>手作業によるミスの低減

<ul>
<li>コンパイル、テスト、デプロイを手作業でやった場合、ミスが発生することが考えられるが、CIツールを使えば大丈夫。</li>
</ul>
</li>
<li>時系列品質の可視化

<ul>
<li>CIツールでは各ビルドに関する情報を格納しているので、時系列でビルドに関する各種情報を可視化できる。</li>
</ul>
</li>
</ol>


<h2>CIの構成要素</h2>

<h3>CIのフロー</h3>

<ol>
<li>開発者がソースコードやテストを作成or修正して変更をバージョン管理サーバのリポジトリに登録</li>
<li>CIサーバがバージョン管理サーバ上のリポジトリの変更を検知</li>
<li>CIサーバが対象のリポジトリに紐づく各種ジョブの実施をビルドサーバに依頼する。ビルドサーバはCIサーバと独立していないこともある</li>
<li>ビルドサーバがコンパイルやテストなどのジョブを実施する。</li>
<li>ジョブの結果をCIサーバが収集し、レポートをにまとめる</li>
<li>CIサーバがジョブの結果を開発者にメールやチャットなどでフィードバックする</li>
</ol>


<p>基本的に上記の流れを繰り返す。CIサーバは定期ビルドも実施できたり、トリガを設定できたりする。</p>

<h4>バージョン管理システム</h4>

<p>Git marcurialなど</p>

<h4>ビルドツール</h4>

<p>JavaではApache Ant, Apache Maven, RubyでつかわれるRakeなど。</p>

<h4>CIツール</h4>

<p>JenkinsはオープンソースCIツールのデファクトスタンダード
商用ツールではMicrosoft Visual Studio Term Founation Serverなど</p>

<h4>テストツール</h4>

<ul>
<li>CIツールではJUnitのようなユニットテストツールをはじめとして様々なレベルのテストツールを実施、レポーティングをサポートする。</li>
<li>LL言語ではテスト・ツールを使ったテストに成る。

<h4>コードカバレッジツール</h4>

自動テキストを実施したさいに、テスト対象の製品コードを自動テストがどれだけテストを実行できたかをステートメントカバレッジと言った網羅基準に従って計測してくれるもの。
CIツールではコードカバレッジも示してくれる。

<h4>コードインスペクションツール</h4></li>
<li>テストのようにコードを実行するのではなく、ソースコードもしくはバイトコードを読み取って、コーディングルールの準拠や潜在バグの検出をするもの。</li>
<li>Javaの開発ではCheckstyleとFindBugsがデファクトスタンダード。両方使われることが多い。</li>
<li>CIツールではコードインスペクションツールの実施結果もレポートにでき、また時系列に可視化できる。

<h4>コードレビューシステム</h4></li>
<li>CIの目的はビルドのすべての作業を自動化するだけではない。</li>
<li>コードレビューや手動テストといったどうしても人でのワークフローが必要な領域があり、その一つがコードレビューシステム。</li>
<li>Gerritを始めとするコードレビューシステムにより、手動でのコードレビューをサポートする。</li>
</ul>


<h1>第2章 Jenkinsの生まれた背景と歴史</h1>

<h2>Jenkinsの生まれた背景</h2>

<p>Jenkinsは元々Hudosonという名称で、2004年川口耕介氏によって開発された。</p>

<h2>CIツールとしてのJenkinsのメリット</h2>

<ul>
<li>CruiseControlやApacheContinumよりもJenkinsが選ばれる理由について</li>
</ul>


<h3>インストールが容易</h3>

<ul>
<li>installerの指示に従えば、数ステップでCIサーバが立てられる。</li>
</ul>


<h3>つかいやすいWebインタフェースによる運用の容易性</h3>

<ul>
<li>Pluginによる拡張性の高い運用が可能だが、これもWebインタフェースによりできる。</li>
</ul>


<h3>豊富なPlugin</h3>

<ul>
<li>デフォルトではSubversionだが、Git Pluginなどを入れれば、各種バージョン管理システムが利用できる。また、ユニットテストツール、メトリックスツール、ビルドツール、課題管理ツール、テスト管理ツールでもメジャーなものはPluginを導入すれば使える。</li>
</ul>


<h2>JavaEE以外の利用</h2>

<ul>
<li>JenkinsはJavaで開発されていることから、JavaEEで使用されていることが多い、しかし、他の領域でも使用できる。

<ul>
<li>Android Application</li>
<li>RoR</li>
<li>コードレビューシステムGerrit</li>
<li>Catalystアプリケーション開発</li>
</ul>
</li>
</ul>


<h1>第4章 Jenkinsの導入</h1>

<h2>Jenkinsのyum install</h2>

<p>今回は本書で使われているUbuntuではなく、Centos6.5に導入することに。</p>

<p>CentOSにJenkinsを入れるに当たり、<a href="http://qiita.com/phimcall/items/10e2003b712ed0adfc7c">CentOS に Jenkins を入れて自動的にコミットとかやりたかった &ndash; Qiita [キータ]</a>を参考にしたのん。</p>

<h1>第7章 RoRをもいいたアプリケーションでのJenkins実践</h1>

<h2>rails newとRSpec</h2>

<ul>
<li>TestToolにRSpecをgem installするため、Gemfileに以下の行を加え、bundle installを行います。</li>
</ul>


<p>```
group :test, :development do</p>

<pre><code>gem 'rspec-rails', '~&gt;2.0'
</code></pre>

<p>end
```</p>

<ul>
<li>RSpecに必要なファイルを生成</li>
</ul>


<p>```
vagrant:>rails generate rspec:install    [/vagrant/work/blog][01/19 06:05:44]</p>

<pre><code>  create  .rspec
  create  spec
  create  spec/spec_helper.rb
</code></pre>

<p>```</p>

<ul>
<li>Railsのscaffoldを用いてProject基礎部分をテストとともに生成する。</li>
</ul>


<p><code>
rails generate scaffold Port name:string title:string content:text
</code></p>

<ul>
<li><p>capybara-webkitのインストール
capybara-webkitは、<strong>RSpecではやってくれないJavaScriptのテストを含めた結合テスト</strong>を行ってくれる。</p></li>
<li><p>Qtをインストール</p></li>
</ul>


<p><code>
$ yum install qt4 qt4-devel qt4-doc qt4-postgresql qt4-odbc qt4-sqlite qt-creator
</code></p>

<p>rspec-rails
database_cleaner</p>

<p>```
group :test, :development do</p>

<pre><code>gem 'rspec-rails', '~&gt;2.0'
gem 'database_cleaner'
</code></pre>

<p>end</p>

<p>group :test do</p>

<pre><code>gem 'headless'
</code></pre>

<p>end
~
```</p>

<p>```
Gem::Ext::BuildError: ERROR: Failed to build gem native extension.</p>

<pre><code>/home/vagrant/.rbenv/versions/2.1.0/bin/ruby extconf.rb
</code></pre>

<p>Command &lsquo;qmake -spec linux-g++ &rsquo; not available</p>

<p>Makefile not found</p>

<p>Gem files will remain installed in /home/vagrant/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/capybara-webkit-1.1.1 for inspection.
Results logged to /home/vagrant/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/extensions/x86_64-linux/2.1.0-static/capybara-webkit-1.1.1/gem_make.out
An error occurred while installing capybara-webkit (1.1.1), and Bundler cannot
continue.
Make sure that <code>gem install capybara-webkit -v '1.1.1'</code> succeeds before
bundling.
FAILED&hellip;gem install capybara-webkit -v &lsquo;1.1.1&rsquo;
```</p>

<p>今日(2014/01/19)はここまで</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins Chef Bundleについて調べた]]></title>
    <link href="http://rice-american.github.io/blog/2014/01/12/about_Jenkins_Chef_Bundle/"/>
    <updated>2014-01-12T00:00:00+09:00</updated>
    <id>http://rice-american.github.io/blog/2014/01/12/about_Jenkins_Chef_Bundle</id>
    <content type="html"><![CDATA[<h2>しらべたもの</h2>

<h4>Vagrantについて</h4>

<p>といってもここを見ただけ</p>

<ul>
<li><p><a href="http://qiita.com/kidachi_/items/e63c1607705178aa257c">Vagrantの基本 &ndash; Qiita [キータ]</a></p></li>
<li><p>嬉しいこと</p>

<ul>
<li>他人への環境配布が容易(boxを配ればいい)</li>
<li>ゲストOS(CentOSとか)とホストOS(Macとか)で共有フォルダが作成されるので、Macの環境でコードを書いて、ホストOSで実行する、ということができる！</li>
</ul>
</li>
</ul>


<h4>Jenkinsについて</h4>

<p>継続的インテグレーション(CI)するやーつ</p>

<pre><code>テストの自動化
デプロイの自動化
各種タイミングでの通知
</code></pre>

<p>をしてくれるすごいやつらしい→
<a href="http://www.buildinsider.net/enterprise/jenkins/01">Jenkinsを使ってみよう（Mac OS X＆Linux）［Ruby、Rails］ &ndash; Build Insider</a></p>

<p><code>
 brew install jenkins
</code>
で入る。</p>

<h4>Chefについて</h4>

<ul>
<li>ファイルに記述した設定内容に応じて自動的にユーザーの作成やパッケージのインストール、設定ファイルの編集などを行うツール.</li>
<li>Recipeを元にserverを立てる。</li>
<li>Recipeはrubyで書かれている。</li>
</ul>


<h4>Bundelrについて</h4>

<ul>
<li>Gemパッケージの種類やバージョン管理し、複数のPCで必要なGemパッケージを簡単にinstallすることができるPackageである。</li>
</ul>


<p>tips:<a href="http://blog.mirakui.com/entry/20100703/1278165723">gem管理の新標準ツール"Bundler"のTips &ndash; 昼メシ物語</a></p>

<p><code>
bundle install [Dir]
</code>
とすると、Dir以下にgemが展開されるので、localのgemは汚染されない。</p>

<p>通常は</p>

<p><code>
bundle install vender/bundle
</code>
とする。</p>

<p>こうしてbundle install すると、次回以降はdir指定はしなくて良い。</p>

<p>設定ファイルは<strong>./bundle/config</strong>にあり。</p>

<p>$GEM_HOMEのgemを一切使わないoptionは</p>

<p><code>
$ bundle install --path=vendor/bundle --binstubs=vendor/bin
</code></p>

<p>となる。</p>

<p><strong>exec</strong></p>

<ul>
<li><strong>bundle execをつかうと、BUNDLE_PATH以下のgemが使われる。</strong></li>
</ul>


<p><code>
$ bundle exec hoge
</code></p>

<p><strong>cronからbundleを使いたいときは</strong></p>

<p><code>
 * * * * * source $HOME/.rvm/scripts/rvm; rvm your-ruby-version; cd /path-to-project/; bundle exec ruby your-script.rb
</code>
とするらしい。</p>
]]></content>
  </entry>
  
</feed>
